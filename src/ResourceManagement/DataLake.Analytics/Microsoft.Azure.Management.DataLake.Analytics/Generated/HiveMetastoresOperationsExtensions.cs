// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for HiveMetastoresOperations.
    /// </summary>
    public static partial class HiveMetastoresOperationsExtensions
    {
            /// <summary>
            /// Gets the specified Hive metastore linked to the given Data Lake Analytics
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve Hive
            /// metastore details.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore for which to retrieve the details.
            /// </param>
            public static HiveMetastore Get(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName)
            {
                return Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).GetAsync(resourceGroupName, accountName, hiveMetastoreName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Hive metastore linked to the given Data Lake Analytics
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve Hive
            /// metastore details.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore for which to retrieve the details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HiveMetastore> GetAsync(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, hiveMetastoreName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to remove the specified
            /// Hive metastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Hive
            /// metastore.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore to remove
            /// </param>
            public static void Delete(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName)
            {
                Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).DeleteAsync(resourceGroupName, accountName, hiveMetastoreName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to remove the specified
            /// Hive metastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Hive
            /// metastore.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, hiveMetastoreName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the Data Lake Analytics account to replace Hive metastore details
            /// with updated ones, such as an updated password.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to modify Hive metastores in
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The Hive metastore to modify
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing Hive metastore properties to update.
            /// </param>
            public static void Update(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, UpdateHiveMetaStoreParameters parameters = default(UpdateHiveMetaStoreParameters))
            {
                Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).UpdateAsync(resourceGroupName, accountName, hiveMetastoreName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Data Lake Analytics account to replace Hive metastore details
            /// with updated ones, such as an updated password.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to modify Hive metastores in
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The Hive metastore to modify
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing Hive metastore properties to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, UpdateHiveMetaStoreParameters parameters = default(UpdateHiveMetaStoreParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, hiveMetastoreName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to add a Hive metastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add Hive metastore.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore to add
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing properties for the Hive metastore to add.
            /// </param>
            public static void Add(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, AddHiveMetaStoreParameters parameters)
            {
                Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).AddAsync(resourceGroupName, accountName, hiveMetastoreName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to add a Hive metastore.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add Hive metastore.
            /// </param>
            /// <param name='hiveMetastoreName'>
            /// The name of the Hive metastore to add
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing properties for the Hive metastore to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAsync(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, string hiveMetastoreName, AddHiveMetaStoreParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddWithHttpMessagesAsync(resourceGroupName, accountName, hiveMetastoreName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the first page of the Hive metastores, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Hive
            /// metastores.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            public static IPage<HiveMetastore> ListByAccount(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, ODataQuery<HiveMetastore> odataQuery = default(ODataQuery<HiveMetastore>), string select = default(string), bool? count = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).ListByAccountAsync(resourceGroupName, accountName, odataQuery, select, count), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of the Hive metastores, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Hive
            /// metastores.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HiveMetastore>> ListByAccountAsync(this IHiveMetastoresOperations operations, string resourceGroupName, string accountName, ODataQuery<HiveMetastore> odataQuery = default(ODataQuery<HiveMetastore>), string select = default(string), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountWithHttpMessagesAsync(resourceGroupName, accountName, odataQuery, select, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of the Hive metastores, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HiveMetastore> ListByAccountNext(this IHiveMetastoresOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IHiveMetastoresOperations)s).ListByAccountNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of the Hive metastores, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HiveMetastore>> ListByAccountNextAsync(this IHiveMetastoresOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
